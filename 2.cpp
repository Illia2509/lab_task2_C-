#include <iostream>  // Для введення та виведення
#include <vector>    // Для використання динамічних масивів (векторів)
#include <ctime>     // Для роботи з часом (ініціалізація генератора випадкових чисел)
#include <cstdlib>   // Для використання функції rand()

using namespace std;  // Простір імен std для спрощення синтаксису

// Функція для виведення матриці на екран у зручному форматі
void printMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {  // Проходимо по кожному рядку матриці
        for (int element : row) {     // Проходимо по кожному елементу рядка
            cout << element << "\t";  // Виводимо елемент з табуляцією
        }
        cout << endl;  // Переходимо на новий рядок після кожного рядка матриці
    }
    cout << endl;
}

// Функція для обчислення скалярного добутку двох векторів однакової довжини
int scalarProduct(const vector<int>& vec1, const vector<int>& vec2) {
    int product = 0;  // Ініціалізуємо змінну для збереження результату
    for (size_t i = 0; i < vec1.size(); i++) {  // Проходимо по кожному елементу векторів
        product += vec1[i] * vec2[i];  // Додаємо добуток відповідних елементів
    }
    return product;  // Повертаємо результат скалярного добутку
}

int main() {
    srand(static_cast<unsigned>(time(0)));  // Ініціалізуємо генератор випадкових чисел

    int rows, cols;
    cout << "Введіть кількість рядків: ";
    cin >> rows;
    cout << "Введіть кількість стовпців: ";
    cin >> cols;

    // Створюємо матрицю заданого розміру та заповнюємо її випадковими числами
    vector<vector<int>> matrix(rows, vector<int>(cols));
    for (auto& row : matrix) {           // Проходимо по кожному рядку матриці
        for (int& element : row) {       // Проходимо по кожному елементу рядка
            element = rand() % 10;       // Присвоюємо випадкове число від 0 до 9
        }
    }

    cout << "Згенерована матриця:" << endl;
    printMatrix(matrix);  // Викликаємо функцію для виведення матриці на екран

    // Беремо перший рядок для обчислення скалярних добутків
    const vector<int>& firstRow = matrix[0];  // Отримуємо посилання на перший рядок

    cout << "Скалярний добуток першого рядка з іншими рядками:" << endl;
    for (int i = 1; i < rows; i++) {  // Починаємо з другого рядка
        int product = scalarProduct(firstRow, matrix[i]);  // Обчислюємо скалярний добуток
        cout << "Скалярний добуток з рядком " << i + 1 << ": " << product << endl;
    }

    return 0;  // Завершуємо програму
}
